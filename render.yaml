# =========================================
# üéÆ Pok√©Arena Frontend - Render Deploy Config
# =========================================
#
# Este arquivo configura automaticamente o deploy do frontend React + Vite
# na Render como um Static Site (arquivos est√°ticos servidos via CDN).
#
# Como usar:
#   1. Fa√ßa commit deste arquivo: git add render.yaml && git commit -m "Add Render config"
#   2. Push para o GitHub: git push origin main
#   3. Na Render: Dashboard ‚Üí New ‚Üí Blueprint ‚Üí Conectar reposit√≥rio
#   4. Render detecta o render.yaml automaticamente e cria tudo com um clique!
#
# Documenta√ß√£o: https://render.com/docs/static-sites
# =========================================

services:
  # =========================================
  # üåê Static Site (Frontend SPA)
  # =========================================
  - type: web
    name: poke-arena-front
    env: static  # Static Site - serve apenas arquivos est√°ticos via CDN global
    region: oregon  # us-west (mais barato) - alternativas: ohio (us-east), frankfurt (eu-central)

    # Branch principal para auto-deploy
    branch: main

    # =========================================
    # üî® Build Configuration
    # =========================================

    # Build Command: instala depend√™ncias e compila o projeto
    # npm ci: instala√ß√£o limpa e determin√≠stica (mais confi√°vel que npm install)
    # npm run build: executa "tsc -b && vite build" do package.json
    buildCommand: npm ci && npm run build

    # Publish Directory: pasta onde ficam os arquivos buildados
    # O Vite gera os arquivos compilados na pasta "dist/"
    publishDir: dist

    # Auto-deploy: deploy autom√°tico quando h√° push na branch principal
    autoDeploy: true

    # =========================================
    # üîß Vari√°veis de Ambiente
    # =========================================
    # IMPORTANTE: Vari√°veis do Vite DEVEM come√ßar com "VITE_"
    # Elas s√£o injetadas em BUILD TIME (n√£o runtime)

    envVars:
      # URL da API Backend (conecta ao servi√ßo poke-arena-back)
      - key: VITE_API_URL
        value: https://poke-arena-back.onrender.com

      # Nome da aplica√ß√£o (usado no c√≥digo via import.meta.env.VITE_APP_NAME)
      - key: VITE_APP_NAME
        value: Pok√©Arena

      # Vers√£o da aplica√ß√£o
      - key: VITE_APP_VERSION
        value: 1.0.0

      # Node.js version para o processo de build
      - key: NODE_VERSION
        value: 20

    # =========================================
    # üõ£Ô∏è Routes - SPA Routing Support
    # =========================================
    # Como o projeto usa React Router, precisamos garantir que
    # TODAS as rotas (ex: /battle, /pokemon/123) sejam tratadas
    # pelo React Router e n√£o pelo servidor.
    #
    # Sem essa configura√ß√£o:
    #   ‚ùå /battle ‚Üí 404 Not Found (servidor procura arquivo battle.html)
    #
    # Com essa configura√ß√£o:
    #   ‚úÖ /battle ‚Üí index.html ‚Üí React Router carrega a rota

    routes:
      - type: rewrite
        source: /*
        destination: /index.html

    # =========================================
    # üîí Headers - Seguran√ßa e Performance
    # =========================================

    headers:
      # ---------------------------------------
      # Seguran√ßa
      # ---------------------------------------

      # X-Frame-Options: previne clickjacking
      # DENY: n√£o permite que o site seja embedado em iframes
      - path: /*
        name: X-Frame-Options
        value: DENY

      # X-Content-Type-Options: previne MIME sniffing
      # nosniff: for√ßa o browser a respeitar o Content-Type declarado
      - path: /*
        name: X-Content-Type-Options
        value: nosniff

      # X-XSS-Protection: prote√ß√£o adicional contra XSS
      # 1; mode=block: ativa prote√ß√£o e bloqueia p√°ginas suspeitas
      - path: /*
        name: X-XSS-Protection
        value: 1; mode=block

      # Referrer-Policy: controla informa√ß√µes de referrer
      # strict-origin-when-cross-origin: envia referrer apenas para HTTPS
      - path: /*
        name: Referrer-Policy
        value: strict-origin-when-cross-origin

      # Permissions-Policy: desabilita recursos desnecess√°rios
      # Camera, microphone, geolocation desabilitados por padr√£o
      - path: /*
        name: Permissions-Policy
        value: camera=(), microphone=(), geolocation=()

      # ---------------------------------------
      # Performance e Cache
      # ---------------------------------------

      # Cache agressivo para assets est√°ticos (JS, CSS, images)
      # Os assets do Vite incluem hash no nome (ex: main.abc123.js)
      # Isso significa que s√£o immutable - podem ser cacheados forever
      - path: /assets/*
        name: Cache-Control
        value: public, max-age=31536000, immutable

      # Cache para index.html (sempre revalidar para pegar novas vers√µes)
      - path: /index.html
        name: Cache-Control
        value: no-cache, no-store, must-revalidate

      # Compress√£o gzip/brotli (Render faz automaticamente, mas √© bom explicitar)
      - path: /*
        name: Content-Encoding
        value: gzip

# =========================================
# üìù Notas Importantes
# =========================================
#
# 1. STATIC SITE vs WEB SERVICE:
#    - Static Site: arquivos est√°ticos servidos via CDN (seu caso)
#    - Web Service: aplica√ß√µes Node.js/SSR (Next.js, Express, etc)
#    - Static Site √© GRATUITO na Render (at√© 100GB bandwidth/m√™s)
#
# 2. VARI√ÅVEIS VITE (Build Time):
#    - Vari√°veis VITE_* s√£o injetadas durante o BUILD
#    - N√£o podem ser mudadas depois do build (diferente de runtime vars)
#    - Se mudar VITE_API_URL, precisa fazer novo deploy (rebuild)
#    - Acesse no c√≥digo: import.meta.env.VITE_API_URL
#
# 3. CORS NO BACKEND:
#    - O backend DEVE permitir requisi√ß√µes do frontend
#    - Adicione no main.ts do NestJS:
#      app.enableCors({
#        origin: [
#          'http://localhost:5173', // dev local
#          'https://poke-arena-front.onrender.com', // produ√ß√£o
#        ],
#        credentials: true,
#      });
#
# 4. SPA ROUTING:
#    - A regra "/* ‚Üí /index.html" garante que o React Router funcione
#    - Sem ela: acessar /battle diretamente ‚Üí 404
#    - Com ela: acessar /battle ‚Üí index.html ‚Üí React Router carrega a rota
#
# 5. CUSTOM DOMAIN:
#    - Por padr√£o: poke-arena-front.onrender.com
#    - Para dom√≠nio pr√≥prio: Dashboard ‚Üí Settings ‚Üí Custom Domain
#    - Adicione um CNAME record no seu DNS apontando para Render
#
# 6. HTTPS/SSL:
#    - Render fornece HTTPS autom√°tico e gratuito
#    - Certificado Let's Encrypt renovado automaticamente
#    - Nenhuma configura√ß√£o necess√°ria
#
# 7. BUILD FAILURES (troubleshooting):
#    - Erro "command not found": verifique buildCommand
#    - Erro "cannot find module": verifique se est√° usando "npm ci"
#    - Build muito lento: considere usar pnpm ao inv√©s de npm
#    - Erro de TypeScript: rode "npm run build" localmente primeiro
#
# 8. PERFORMANCE:
#    - CDN global: baixa lat√™ncia mundial
#    - Assets com hash: cache infinito seguro
#    - Brotli compression: ~20% menor que gzip
#    - Static Site √© extremamente r√°pido (sem processamento server-side)
#
# 9. CUSTO:
#    - Static Sites: GRATUITO na Render
#    - Bandwidth: 100GB/m√™s inclu√≠do
#    - Sem limites de build minutes
#    - Deploy ilimitado
#
# 10. DEPLOY FLOW:
#     1. git push origin main
#        ‚Üì
#     2. Render detecta mudan√ßa
#        ‚Üì
#     3. Build:
#        - npm ci (instala deps)
#        - npm run build (compila TS + Vite)
#        - gera pasta dist/
#        ‚Üì
#     4. Deploy:
#        - publica arquivos de dist/ no CDN
#        - aplica routes e headers
#        ‚Üì
#     5. Live! üéâ
#        - https://poke-arena-front.onrender.com
#
# =========================================
# üîó URLs Importantes
# =========================================
#
# Frontend (ap√≥s deploy):
#   https://poke-arena-front.onrender.com
#
# Backend (j√° configurado):
#   https://poke-arena-back.onrender.com
#
# Documenta√ß√£o Render:
#   - Static Sites: https://render.com/docs/static-sites
#   - Blueprint Spec: https://render.com/docs/blueprint-spec
#   - Deploy Hooks: https://render.com/docs/deploy-hooks
#
# =========================================
